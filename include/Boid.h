//----------------------------------------------------------------------------------------------------------------------
/// @file Boid.h
/// Modified from Alexander la Tourelle (14 May 2015). Flock [online]
/// [Accessed 2016] Available from: <https://github.com/mainConfetti/Flock>
/// @date 27/01/17
/// @class Boid
/// @brief A class to hold all boid attributes such as velocity and position, and steering
/// forces such as flee, follow, evade, pursue, seek, avoid and flocking rules cohesion
/// alignment, separation and combine to demonstrate flocking as defined by Craig Reynolds (1986)
/// Modifications include 3 dimensional rotations for the boids, improved wandering
/// algorithm using points on a spehere method, smooth arrival, pursuit and evade functions.
//----------------------------------------------------------------------------------------------------------------------
#ifndef BOID_H
#define BOID_H

#include <glm/vec3.hpp>
#include <vector>

class Boid
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    /// @param [in] _id the ID of the boid
    //----------------------------------------------------------------------------------------------------------------------
    Boid(int _id);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the velocity of the boid
    /// @return int m_id data member variable
    //----------------------------------------------------------------------------------------------------------------------
    int getId();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the current velocity of the boid
    /// @return ngl::Vec3 m_velocity data member variable
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 getVelocity();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the current position of the boid
    /// @return ngl::Vec3 m_position data member variable
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 getPosition();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the local axis rotation of the boid
    /// @return returns ngl::Vec3 using x=pitch, y=yaw and z=roll
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 getRotation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the view radius of the boid
    /// @return float m_viewRadius data member variable
    //----------------------------------------------------------------------------------------------------------------------
    float getViewRadius();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the avoid radius of the boid
    /// @return floatw m_avoidRadius data member variable
    //----------------------------------------------------------------------------------------------------------------------
    float getAvoidRadius();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets whether the boid is a leader
    /// @return boolean m_isLeader data member variable
    //----------------------------------------------------------------------------------------------------------------------
    bool isLeader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets whether the boid is a predator
    /// @return boolean m_isPredator data member variable
    //----------------------------------------------------------------------------------------------------------------------
    bool isPredator();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the neighbour size of the boid
    /// @return int size of std::vector m_neighbours data member variable
    //----------------------------------------------------------------------------------------------------------------------
    int getNeighbourSize();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setAlignmentWeight(float _alignmentWeight);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setCohesionWeight(float _cohesionWeight);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setSeparationWeight(float _separationWeight);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setAvoidWeight(float _avoidWeight);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setPosition(glm::vec3 _position);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setVelocity(glm::vec3 _velocity);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setLeader(Boid *_leader);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setPredator(Boid *_predator);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setNeighbours(Boid *_boid);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setCentroid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void clearNeighbours();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void clearLeader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void makeLeader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void makePredator();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setCohesion();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setAlignment();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setSeparation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setSeek();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setPursuit(glm::vec3 _pursuePosition, glm::vec3 _pursueVelocity);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setFlee(glm::vec3 _fleePosition);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void evade(Boid *_boid);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setWander();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setAvoid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setFollow();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setTarget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void setSteering();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void move();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void rotate();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void fleeWalls();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    /// @param
    /// @return
    //----------------------------------------------------------------------------------------------------------------------
    void pathIntersectsSphere(glm::vec3 _obstaclePosition, float _obstacleSize);
    void setId(int _id);


private:

    //--------------------ATTRIBUTES--------------------
    int m_id; //ID of boid
    glm::vec3 m_position; //position vector
    glm::vec3 m_velocity; //velocity vector
    glm::vec3 m_centroid; //local flock center
    glm::vec3 m_target; // target vector
    glm::vec3 m_separation; //separation force vector
    glm::vec3 m_alignment; //alignment force vector
    glm::vec3 m_cohesion; //cohesion force vector
    glm::vec3 m_pursuit; //pursuit vector
    glm::vec3 m_flee; //flee vector
    glm::vec3 m_wander; //wander vector
    glm::vec3 m_avoid;//collision avoidance vector;
    glm::vec3 m_follow;//leader following vector
    glm::vec3 m_threatPosition;//position vector of the most threatening object in path- obstacle or other boids.
    glm::vec3 m_steering; //sum of all steering vectors

    float m_slowingRadius; //slowing radius
    float m_maxVelocity; //multiplier for maximum velocity
    float m_wanderSphereDistance; //increase to reduce jitter
    float m_wanderSphereRadius;
    float m_wanderAngle;
    float m_wanderAzimuth;
    float m_wanderAngleChange;
    float m_wanderAzimuthChange;
    float m_avoidRadius; // radius of avoidance sphere of the boid
    float m_avoidWeight; //avoidance force weight
    float m_cohesionWeight; //cohesion weight
    float m_alignmentWeight; //alignment weight
    float m_separationWeight; //separation weight
    float m_maxSeeAhead;// maximum see-ahead distance
    float m_leaderFollowDistance; //leader follow distance
    float m_viewRadius;//view to find leader
    float m_separationRadius;//separation radius

    float m_roll; //rotation about x axis -180 to 180
    float m_pitch; //rotation about y axis -90 to 90
    float m_yaw; //rotation about z axis -180 to 180

    bool m_isLeader; // flag for leader boid
    bool m_hasLeader;
    bool m_isPredator;
    bool m_hasPredator;

    Boid *m_leader; //leader boid to follow
    Boid *m_predator; //predator boid to flee;

    std::vector<Boid *> m_neighbours; //vector for storing all neighbours
};

#endif // BOID_H
